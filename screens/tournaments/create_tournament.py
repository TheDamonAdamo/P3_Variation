# screens/tournaments/create_tournament.py
"""
Screen for collecting details to create a new tournament.
"""
from ..base_screen import BaseScreen
import datetime


class CreateTournamentScreen(BaseScreen):
    """
    Handles the user interface for creating a new tournament.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def get_tournament_details():
        """Prompts the user for new tournament details and returns them as a dict."""
        print("\n--- Create New Tournament ---")
        name = input("Tournament Name: ").strip()
        location = input("Location: ").strip()

        while True:
            start_date_str = input("Start Date (YYYY-MM-DD): ").strip()
            try:
                datetime.date.fromisoformat(start_date_str)
                break
            except ValueError:
                print("Invalid date format. Please use YYYY-MM-DD.")

        while True:
            end_date_str = input("End Date (YYYY-MM-DD): ").strip()
            try:
                datetime.date.fromisoformat(end_date_str)
                if datetime.date.fromisoformat(end_date_str) < datetime.date.fromisoformat(start_date_str):
                    print("End date cannot be before start date.")
                    continue
                break
            except ValueError:
                print("Invalid date format. Please use YYYY-MM-DD.")

        num_rounds = BaseScreen.get_user_input_int("Number of Rounds (default 4): ", default=4)
        description = input("Description (optional): ").strip()

        return {
            "tournament_id": None,  # Will be generated by model
            "name": name,
            "location": location,
            "start_date": start_date_str,
            "end_date": end_date_str,
            "num_rounds": num_rounds,
            "description": description,
            "players": [],  # Start empty
            "rounds": [],  # Start empty
            "current_round_num": 0,
            "status": "created"
        }